-- Create Sales table

CREATE TABLE Sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    quantity_sold INT,
    sale_date DATE,
    total_price DECIMAL(10, 2)
);

-- Insert sample data into Sales table

INSERT INTO Sales (sale_id, product_id, quantity_sold, sale_date, total_price) VALUES
(1, 101, 5, '2024-01-01', 2500.00),
(2, 102, 3, '2024-01-02', 900.00),
(3, 103, 2, '2024-01-02', 60.00),
(4, 104, 4, '2024-01-03', 80.00),
(5, 105, 6, '2024-01-03', 90.00);

-- Create Products table

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    unit_price DECIMAL(10, 2)
);

-- Insert sample data into Products table

INSERT INTO Products (product_id, product_name, category, unit_price) VALUES
(101, 'Laptop', 'Electronics', 500.00),
(102, 'Smartphone', 'Electronics', 300.00),
(103, 'Headphones', 'Electronics', 30.00),
(104, 'Keyboard', 'Electronics', 20.00),
(105, 'Mouse', 'Electronics', 15.00);

select * from sales s 
select * from products p 

--1. Calculate the total revenue generated from sales for each product category
select p.category ,sum(total_price) as total_revenue from sales s 
join products p on s.product_id = p.product_id
group by category ;

--2. Find the product category with the highest average unit price.
select p.category, avg(unit_price) from sales s
join products p on s.product_id = p.product_id
group by category 
limit 1;

--3. Identify products with total sales exceeding 30.
select p.product_name from sales s
join products p on s.product_id = p.product_id
group by product_name 
having sum(total_price) > 30;

--4. Count the number of sales made in each month.
SELECT DATE_FORMAT(s.sale_date, '%Y-%m') AS month, COUNT(*) AS sales_count
FROM Sales s
GROUP BY month;

--5. Determine the average quantity sold for products with a unit price greater than $100.
select avg(quantity_sold) from sales s
join products p on s.product_id = p.product_id
where unit_price >100;

--6. Retrieve the product name and total sales revenue for each product.
select p.product_name, sum(total_price) as total from sales s
join products p  on s.product_id = p.product_id
group by p.product_name
order by product_name ;

--7. List all sales along with the corresponding product names.
select sale_id, p.product_name from sales s
join products p on s.product_id = p.product_id;

--8. Retrieve the product name and total sales revenue for each product.
--Same Question

--9. Rank products based on total sales revenue
SELECT p.product_name, SUM(s.total_price) AS total_revenue,
       RANK() OVER (ORDER BY SUM(s.total_price) DESC) AS revenue_rank
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
GROUP BY p.product_name;

--10. Calculate the running total revenue for each product category.
SELECT p.category, p.product_name, s.sale_date, 
       SUM(s.total_price) OVER (PARTITION BY p.category ORDER BY s.sale_date) AS running_total_revenue
FROM Sales s
JOIN Products p ON s.product_id = p.product_id;

--11. Categorize sales as “High”, “Medium”, or “Low” based on total price (e.g., > $200 is High, $100-$200 is Medium, < $100 is Low).
SELECT sale_id, 
       CASE 
           WHEN total_price > 200 THEN 'High'
           WHEN total_price BETWEEN 100 AND 200 THEN 'Medium'
           ELSE 'Low'
       END AS sales_category
FROM Sales;

--12. Identify sales where the quantity sold is greater than the average quantity sold.
SELECT *
FROM Sales
WHERE quantity_sold > (SELECT AVG(quantity_sold) FROM Sales);

